#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input tile_map.glsl --output tile_map.h --slang glsl410:glsl300es:hlsl5:metal_macos:metal_ios:metal_sim --format=sokol --reflection --ifdef --module tile_map

    Overview:
    =========
    Shader program: 'program':
        Get shader desc: tile_map_program_shader_desc(sg_query_backend());
        Vertex shader: vs
            Attributes:
                ATTR_tile_map_vs_vs_position => 0
                ATTR_tile_map_vs_vs_texcoord0 => 1
            Uniform block 'tile_map_vs_params':
                C struct: tile_map_tile_map_vs_params_t
                Bind slot: SLOT_tile_map_tile_map_vs_params => 0
        Fragment shader: fs
            Uniform block 'tile_map_fs_params':
                C struct: tile_map_tile_map_fs_params_t
                Bind slot: SLOT_tile_map_tile_map_fs_params => 0
            Image 'un_tex0':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_DEPTH
                Multisampled: false
                Bind slot: SLOT_tile_map_un_tex0 => 0
            Image 'un_tex1':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_tile_map_un_tex1 => 1
            Image 'un_tex2':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_tile_map_un_tex2 => 2
            Sampler 'un_sampler1':
                Type: SG_SAMPLERTYPE_COMPARISON
                Bind slot: SLOT_tile_map_un_sampler1 => 0
            Sampler 'un_sampler0':
                Type: SG_SAMPLERTYPE_FILTERING
                Bind slot: SLOT_tile_map_un_sampler0 => 1
            Image Sampler Pair 'un_tex0_un_sampler1':
                Image: un_tex0
                Sampler: un_sampler1
            Image Sampler Pair 'un_tex1_un_sampler0':
                Image: un_tex1
                Sampler: un_sampler0
            Image Sampler Pair 'un_tex2_un_sampler0':
                Image: un_tex2
                Sampler: un_sampler0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before tile_map.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_tile_map_vs_vs_position (0)
#define ATTR_tile_map_vs_vs_texcoord0 (1)
#define SLOT_tile_map_tile_map_vs_params (0)
#define SLOT_tile_map_tile_map_fs_params (0)
#define SLOT_tile_map_un_tex0 (0)
#define SLOT_tile_map_un_tex1 (1)
#define SLOT_tile_map_un_tex2 (2)
#define SLOT_tile_map_un_sampler1 (0)
#define SLOT_tile_map_un_sampler0 (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct tile_map_tile_map_vs_params_t {
    Mat4f un_mvp;
    Mat4f un_shadow;
    float un_inv_world_size[2];
    uint8_t _pad_136[8];
} tile_map_tile_map_vs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct tile_map_tile_map_fs_params_t {
    Vect4f un_tile_color;
} tile_map_tile_map_fs_params_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 tile_map_vs_params[9];
    layout(location = 0) in vec3 vs_position;
    layout(location = 0) out vec3 fs_uv0;
    layout(location = 1) out vec3 fs_uv1;
    layout(location = 2) out vec3 fs_uv2;
    layout(location = 3) out vec3 fs_uv3;
    layout(location = 4) out vec2 fs_uv4;
    layout(location = 1) in vec2 vs_texcoord0;
    layout(location = 5) out vec2 fs_uv5;

    void main()
    {
        vec4 _32 = vec4(vs_position, 1.0);
        gl_Position = mat4(tile_map_vs_params[0], tile_map_vs_params[1], tile_map_vs_params[2], tile_map_vs_params[3]) * _32;
        vec4 _46 = mat4(tile_map_vs_params[4], tile_map_vs_params[5], tile_map_vs_params[6], tile_map_vs_params[7]) * _32;
        fs_uv0 = (_46 + vec4(-0.0009765625, 0.00048828125, 0.0, 0.0)).xyz;
        fs_uv1 = (_46 + vec4(0.0009765625, -0.00048828125, 0.0, 0.0)).xyz;
        fs_uv2 = (_46 + vec4(0.0, -0.0009765625, 0.0, 0.0)).xyz;
        fs_uv3 = (_46 + vec4(0.0, 0.0009765625, 0.0, 0.0)).xyz;
        fs_uv0.y = 1.0 - fs_uv0.y;
        fs_uv1.y = 1.0 - fs_uv1.y;
        fs_uv2.y = 1.0 - fs_uv2.y;
        fs_uv3.y = 1.0 - fs_uv3.y;
        fs_uv4 = vs_texcoord0;
        fs_uv5 = vs_position.xy * tile_map_vs_params[8].xy;
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t tile_map_vs_source_glsl410[1132] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x69,0x6c,0x65,0x5f,
    0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,
    0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x33,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x33,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x35,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x74,0x69,0x6c,
    0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x34,0x36,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x34,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x74,0x69,0x6c,
    0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x36,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x2d,0x30,0x2e,0x30,0x30,
    0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x34,
    0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x31,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x76,0x65,0x63,
    0x34,0x28,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,
    0x2d,0x30,0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x3d,0x20,0x28,0x5f,0x34,
    0x36,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x30,
    0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,
    0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x30,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x31,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x32,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x32,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x33,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,
    0x3d,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x20,0x3d,0x20,0x76,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,0x20,0x2a,0x20,0x74,0x69,
    0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x38,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 tile_map_fs_params[1];
    uniform sampler2DShadow un_tex0_un_sampler1;
    uniform sampler2D un_tex1_un_sampler0;
    uniform sampler2D un_tex2_un_sampler0;

    layout(location = 0) in vec3 fs_uv0;
    layout(location = 1) in vec3 fs_uv1;
    layout(location = 2) in vec3 fs_uv2;
    layout(location = 3) in vec3 fs_uv3;
    layout(location = 4) in vec2 fs_uv4;
    layout(location = 5) in vec2 fs_uv5;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        frag_color = vec4((((((vec3(0.25) * (((texture(un_tex0_un_sampler1, vec3(fs_uv0.xy, fs_uv0.z)) + texture(un_tex0_un_sampler1, vec3(fs_uv1.xy, fs_uv1.z))) + texture(un_tex0_un_sampler1, vec3(fs_uv2.xy, fs_uv2.z))) + texture(un_tex0_un_sampler1, vec3(fs_uv3.xy, fs_uv3.z)))) * 0.5) + vec3(0.5)) * texture(un_tex1_un_sampler0, fs_uv4).xyz) * tile_map_fs_params[0].xyz) * texture(un_tex2_un_sampler0, fs_uv5).xyz, tile_map_fs_params[0].w);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t tile_map_fs_source_glsl410[897] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x69,0x6c,0x65,0x5f,
    0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x53,0x68,0x61,0x64,0x6f,0x77,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,
    0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x3b,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x30,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x34,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x35,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x28,0x28,0x28,
    0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x35,0x29,0x20,0x2a,0x20,0x28,0x28,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x2e,0x7a,0x29,
    0x29,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x78,0x79,
    0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2b,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x29,0x29,0x20,0x2a,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x74,0x69,0x6c,0x65,
    0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x29,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
/*
    #version 300 es

    uniform vec4 tile_map_vs_params[9];
    layout(location = 0) in vec3 vs_position;
    out vec3 fs_uv0;
    out vec3 fs_uv1;
    out vec3 fs_uv2;
    out vec3 fs_uv3;
    out vec2 fs_uv4;
    layout(location = 1) in vec2 vs_texcoord0;
    out vec2 fs_uv5;

    void main()
    {
        vec4 _32 = vec4(vs_position, 1.0);
        gl_Position = mat4(tile_map_vs_params[0], tile_map_vs_params[1], tile_map_vs_params[2], tile_map_vs_params[3]) * _32;
        vec4 _46 = mat4(tile_map_vs_params[4], tile_map_vs_params[5], tile_map_vs_params[6], tile_map_vs_params[7]) * _32;
        fs_uv0 = (_46 + vec4(-0.0009765625, 0.00048828125, 0.0, 0.0)).xyz;
        fs_uv1 = (_46 + vec4(0.0009765625, -0.00048828125, 0.0, 0.0)).xyz;
        fs_uv2 = (_46 + vec4(0.0, -0.0009765625, 0.0, 0.0)).xyz;
        fs_uv3 = (_46 + vec4(0.0, 0.0009765625, 0.0, 0.0)).xyz;
        fs_uv0.y = 1.0 - fs_uv0.y;
        fs_uv1.y = 1.0 - fs_uv1.y;
        fs_uv2.y = 1.0 - fs_uv2.y;
        fs_uv3.y = 1.0 - fs_uv3.y;
        fs_uv4 = vs_texcoord0;
        fs_uv5 = vs_position.xy * tile_map_vs_params[8].xy;
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t tile_map_vs_source_glsl300es[1009] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x69,
    0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x39,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x33,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x34,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x74,0x69,0x6c,
    0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,
    0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,
    0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x34,0x36,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,
    0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,
    0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,
    0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,
    0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,
    0x2d,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,
    0x36,0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,
    0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,
    0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,
    0x30,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,
    0x20,0x2d,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,
    0x2d,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x33,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x34,0x20,0x3d,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x20,
    0x3d,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,
    0x20,0x2a,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp vec4 tile_map_fs_params[1];
    uniform highp sampler2DShadow un_tex0_un_sampler1;
    uniform highp sampler2D un_tex1_un_sampler0;
    uniform highp sampler2D un_tex2_un_sampler0;

    in highp vec3 fs_uv0;
    in highp vec3 fs_uv1;
    in highp vec3 fs_uv2;
    in highp vec3 fs_uv3;
    in highp vec2 fs_uv4;
    in highp vec2 fs_uv5;
    layout(location = 0) out highp vec4 frag_color;

    void main()
    {
        frag_color = vec4((((((vec3(0.25) * (((texture(un_tex0_un_sampler1, vec3(fs_uv0.xy, fs_uv0.z)) + texture(un_tex0_un_sampler1, vec3(fs_uv1.xy, fs_uv1.z))) + texture(un_tex0_un_sampler1, vec3(fs_uv2.xy, fs_uv2.z))) + texture(un_tex0_un_sampler1, vec3(fs_uv3.xy, fs_uv3.z)))) * 0.5) + vec3(0.5)) * texture(un_tex1_un_sampler0, fs_uv4).xyz) * tile_map_fs_params[0].xyz) * texture(un_tex2_un_sampler0, fs_uv5).xyz, tile_map_fs_params[0].w);
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t tile_map_fs_source_glsl300es[886] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x53,0x68,0x61,0x64,0x6f,0x77,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x69,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x31,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x28,0x28,0x28,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x35,0x29,0x20,
    0x2a,0x20,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x78,0x79,
    0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x66,0x73,0x5f,0x75,0x76,0x31,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x75,
    0x76,0x32,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x7a,0x29,
    0x29,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,0x79,
    0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,
    0x29,0x29,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,
    0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,
    0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x35,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    cbuffer tile_map_vs_params : register(b0)
    {
        row_major float4x4 _20_un_mvp : packoffset(c0);
        row_major float4x4 _20_un_shadow : packoffset(c4);
        float2 _20_un_inv_world_size : packoffset(c8);
    };


    static float4 gl_Position;
    static float3 vs_position;
    static float3 fs_uv0;
    static float3 fs_uv1;
    static float3 fs_uv2;
    static float3 fs_uv3;
    static float2 fs_uv4;
    static float2 vs_texcoord0;
    static float2 fs_uv5;

    struct SPIRV_Cross_Input
    {
        float3 vs_position : TEXCOORD0;
        float2 vs_texcoord0 : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float3 fs_uv0 : TEXCOORD0;
        float3 fs_uv1 : TEXCOORD1;
        float3 fs_uv2 : TEXCOORD2;
        float3 fs_uv3 : TEXCOORD3;
        float2 fs_uv4 : TEXCOORD4;
        float2 fs_uv5 : TEXCOORD5;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        float4 _32 = float4(vs_position, 1.0f);
        gl_Position = mul(_32, _20_un_mvp);
        float4 _46 = mul(_32, _20_un_shadow);
        fs_uv0 = (_46 + float4(-0.0009765625f, 0.00048828125f, 0.0f, 0.0f)).xyz;
        fs_uv1 = (_46 + float4(0.0009765625f, -0.00048828125f, 0.0f, 0.0f)).xyz;
        fs_uv2 = (_46 + float4(0.0f, -0.0009765625f, 0.0f, 0.0f)).xyz;
        fs_uv3 = (_46 + float4(0.0f, 0.0009765625f, 0.0f, 0.0f)).xyz;
        fs_uv4 = vs_texcoord0;
        fs_uv5 = vs_position.xy * _20_un_inv_world_size;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vs_position = stage_input.vs_position;
        vs_texcoord0 = stage_input.vs_texcoord0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fs_uv0 = fs_uv0;
        stage_output.fs_uv1 = fs_uv1;
        stage_output.fs_uv2 = fs_uv2;
        stage_output.fs_uv3 = fs_uv3;
        stage_output.fs_uv4 = fs_uv4;
        stage_output.fs_uv5 = fs_uv5;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t tile_map_vs_source_hlsl5[1772] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x68,
    0x61,0x64,0x6f,0x77,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x5f,0x32,0x30,0x5f,0x75,0x6e,0x5f,0x69,0x6e,0x76,0x5f,0x77,0x6f,0x72,
    0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x38,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x34,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x35,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x35,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x32,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,
    0x75,0x6c,0x28,0x5f,0x33,0x32,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x75,0x6e,0x5f,0x6d,
    0x76,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x34,0x36,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x5f,0x33,0x32,0x2c,0x20,0x5f,
    0x32,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,
    0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,0x30,0x2e,0x30,0x30,0x30,
    0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x34,
    0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,
    0x30,0x2e,0x30,0x66,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,
    0x36,0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,
    0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,
    0x66,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x32,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x30,
    0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,
    0x30,0x2e,0x30,0x66,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,
    0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x3d,0x20,0x76,0x73,0x5f,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x35,0x20,0x3d,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2e,0x78,0x79,0x20,0x2a,0x20,0x5f,0x32,0x30,0x5f,0x75,0x6e,0x5f,0x69,0x6e,
    0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,
    0x6f,0x6f,0x72,0x64,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,
    0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,
    0x33,0x20,0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x20,0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,
    0x73,0x5f,0x75,0x76,0x35,0x20,0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    cbuffer tile_map_fs_params : register(b0)
    {
        float4 _80_un_tile_color : packoffset(c0);
    };

    Texture2D<float4> un_tex0 : register(t0);
    SamplerComparisonState un_sampler1 : register(s0);
    Texture2D<float4> un_tex1 : register(t1);
    SamplerState un_sampler0 : register(s1);
    Texture2D<float4> un_tex2 : register(t2);

    static float3 fs_uv0;
    static float3 fs_uv1;
    static float3 fs_uv2;
    static float3 fs_uv3;
    static float2 fs_uv4;
    static float2 fs_uv5;
    static float4 frag_color;

    struct SPIRV_Cross_Input
    {
        float3 fs_uv0 : TEXCOORD0;
        float3 fs_uv1 : TEXCOORD1;
        float3 fs_uv2 : TEXCOORD2;
        float3 fs_uv3 : TEXCOORD3;
        float2 fs_uv4 : TEXCOORD4;
        float2 fs_uv5 : TEXCOORD5;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        frag_color = float4((((((0.25f.xxx * (((un_tex0.SampleCmp(un_sampler1, fs_uv0.xy, fs_uv0.z) + un_tex0.SampleCmp(un_sampler1, fs_uv1.xy, fs_uv1.z)) + un_tex0.SampleCmp(un_sampler1, fs_uv2.xy, fs_uv2.z)) + un_tex0.SampleCmp(un_sampler1, fs_uv3.xy, fs_uv3.z))) * 0.5f) + 0.5f.xxx) * un_tex1.Sample(un_sampler0, fs_uv4).xyz) * _80_un_tile_color.xyz) * un_tex2.Sample(un_sampler0, fs_uv5).xyz, _80_un_tile_color.w);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fs_uv0 = stage_input.fs_uv0;
        fs_uv1 = stage_input.fs_uv1;
        fs_uv2 = stage_input.fs_uv2;
        fs_uv3 = stage_input.fs_uv3;
        fs_uv4 = stage_input.fs_uv4;
        fs_uv5 = stage_input.fs_uv5;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t tile_map_fs_source_hlsl5[1574] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x38,0x30,0x5f,0x75,0x6e,0x5f,0x74,0x69,
    0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,
    0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x43,0x6f,0x6d,0x70,0x61,0x72,0x69,0x73,0x6f,0x6e,0x53,0x74,0x61,0x74,0x65,0x20,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x20,0x3a,0x20,0x72,0x65,
    0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x75,0x6e,
    0x5f,0x74,0x65,0x78,0x31,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x74,0x31,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,
    0x74,0x65,0x20,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x3a,
    0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x31,0x29,0x3b,0x0a,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,
    0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x74,0x32,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x34,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x30,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x32,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x33,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x34,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x34,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x35,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x28,0x28,0x28,0x28,0x28,0x30,0x2e,0x32,0x35,0x66,0x2e,0x78,0x78,0x78,0x20,
    0x2a,0x20,0x28,0x28,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x43,0x6d,0x70,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x31,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x2e,0x78,0x79,0x2c,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x30,0x2e,0x7a,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6d,0x70,0x28,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x2e,0x7a,0x29,0x29,0x20,
    0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x43,0x6d,0x70,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x78,0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x32,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x43,0x6d,0x70,0x28,0x75,0x6e,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,
    0x79,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x35,0x66,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,
    0x78,0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,
    0x5f,0x38,0x30,0x5f,0x75,0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x29,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x5f,0x38,0x30,0x5f,0x75,0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,
    0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,
    0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,
    0x73,0x5f,0x75,0x76,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x33,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x34,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x35,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_vs_params
    {
        float4x4 un_mvp;
        float4x4 un_shadow;
        float2 un_inv_world_size;
    };

    struct main0_out
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float2 vs_texcoord0 [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant tile_map_vs_params& _20 [[buffer(0)]])
    {
        main0_out out = {};
        float4 _32 = float4(in.vs_position, 1.0);
        out.gl_Position = _20.un_mvp * _32;
        float4 _46 = _20.un_shadow * _32;
        out.fs_uv0 = (_46 + float4(-0.0009765625, 0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv1 = (_46 + float4(0.0009765625, -0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv2 = (_46 + float4(0.0, -0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv3 = (_46 + float4(0.0, 0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv4 = in.vs_texcoord0;
        out.fs_uv5 = in.vs_position.xy * _20.un_inv_world_size;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_vs_source_metal_macos[1202] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x6e,0x5f,0x69,
    0x6e,0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x35,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,
    0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x30,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x33,0x32,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,
    0x6d,0x76,0x70,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,
    0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,
    0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x2d,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,
    0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,
    0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,
    0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2e,0x78,0x79,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,0x69,0x6e,
    0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_fs_params
    {
        float4 un_tile_color;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant tile_map_fs_params& _80 [[buffer(0)]], depth2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], texture2d<float> un_tex2 [[texture(2)]], sampler un_sampler1 [[sampler(0)]], sampler un_sampler0 [[sampler(1)]])
    {
        main0_out out = {};
        out.frag_color = float4((((((float3(0.25) * (((un_tex0.sample_compare(un_sampler1, in.fs_uv0.xy, in.fs_uv0.z) + un_tex0.sample_compare(un_sampler1, in.fs_uv1.xy, in.fs_uv1.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv2.xy, in.fs_uv2.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv3.xy, in.fs_uv3.z))) * 0.5) + float3(0.5)) * un_tex1.sample(un_sampler0, in.fs_uv4).xyz) * _80.un_tile_color.xyz) * un_tex2.sample(un_sampler0, in.fs_uv5).xyz, _80.un_tile_color.w);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_fs_source_metal_macos[1233] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x75,
    0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,
    0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,
    0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x32,0x64,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,
    0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x32,0x29,0x5d,0x5d,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x31,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x28,0x28,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x32,0x35,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x2e,0x7a,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x32,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,
    0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x35,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x35,0x29,
    0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,
    0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2a,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x32,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,
    0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_vs_params
    {
        float4x4 un_mvp;
        float4x4 un_shadow;
        float2 un_inv_world_size;
    };

    struct main0_out
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float2 vs_texcoord0 [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant tile_map_vs_params& _20 [[buffer(0)]])
    {
        main0_out out = {};
        float4 _32 = float4(in.vs_position, 1.0);
        out.gl_Position = _20.un_mvp * _32;
        float4 _46 = _20.un_shadow * _32;
        out.fs_uv0 = (_46 + float4(-0.0009765625, 0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv1 = (_46 + float4(0.0009765625, -0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv2 = (_46 + float4(0.0, -0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv3 = (_46 + float4(0.0, 0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv4 = in.vs_texcoord0;
        out.fs_uv5 = in.vs_position.xy * _20.un_inv_world_size;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_vs_source_metal_ios[1202] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x6e,0x5f,0x69,
    0x6e,0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x35,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,
    0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x30,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x33,0x32,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,
    0x6d,0x76,0x70,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,
    0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,
    0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x2d,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,
    0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,
    0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,
    0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2e,0x78,0x79,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,0x69,0x6e,
    0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_fs_params
    {
        float4 un_tile_color;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant tile_map_fs_params& _80 [[buffer(0)]], depth2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], texture2d<float> un_tex2 [[texture(2)]], sampler un_sampler1 [[sampler(0)]], sampler un_sampler0 [[sampler(1)]])
    {
        main0_out out = {};
        out.frag_color = float4((((((float3(0.25) * (((un_tex0.sample_compare(un_sampler1, in.fs_uv0.xy, in.fs_uv0.z) + un_tex0.sample_compare(un_sampler1, in.fs_uv1.xy, in.fs_uv1.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv2.xy, in.fs_uv2.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv3.xy, in.fs_uv3.z))) * 0.5) + float3(0.5)) * un_tex1.sample(un_sampler0, in.fs_uv4).xyz) * _80.un_tile_color.xyz) * un_tex2.sample(un_sampler0, in.fs_uv5).xyz, _80.un_tile_color.w);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_fs_source_metal_ios[1233] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x75,
    0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,
    0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,
    0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x32,0x64,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,
    0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x32,0x29,0x5d,0x5d,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x31,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x28,0x28,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x32,0x35,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x2e,0x7a,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x32,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,
    0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x35,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x35,0x29,
    0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,
    0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2a,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x32,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,
    0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_vs_params
    {
        float4x4 un_mvp;
        float4x4 un_shadow;
        float2 un_inv_world_size;
    };

    struct main0_out
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float2 vs_texcoord0 [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant tile_map_vs_params& _20 [[buffer(0)]])
    {
        main0_out out = {};
        float4 _32 = float4(in.vs_position, 1.0);
        out.gl_Position = _20.un_mvp * _32;
        float4 _46 = _20.un_shadow * _32;
        out.fs_uv0 = (_46 + float4(-0.0009765625, 0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv1 = (_46 + float4(0.0009765625, -0.00048828125, 0.0, 0.0)).xyz;
        out.fs_uv2 = (_46 + float4(0.0, -0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv3 = (_46 + float4(0.0, 0.0009765625, 0.0, 0.0)).xyz;
        out.fs_uv4 = in.vs_texcoord0;
        out.fs_uv5 = in.vs_position.xy * _20.un_inv_world_size;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_vs_source_metal_sim[1202] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x6e,0x5f,0x69,
    0x6e,0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x35,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,
    0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x30,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x33,0x32,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,
    0x6d,0x76,0x70,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,
    0x75,0x6e,0x5f,0x73,0x68,0x61,0x64,0x6f,0x77,0x20,0x2a,0x20,0x5f,0x33,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,
    0x3d,0x20,0x28,0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x2d,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x30,0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,
    0x30,0x34,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x3d,0x20,0x28,0x5f,0x34,0x36,
    0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,
    0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x3d,0x20,0x28,
    0x5f,0x34,0x36,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2e,0x78,0x79,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x6e,0x5f,0x69,0x6e,
    0x76,0x5f,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct tile_map_fs_params
    {
        float4 un_tile_color;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float3 fs_uv0 [[user(locn0)]];
        float3 fs_uv1 [[user(locn1)]];
        float3 fs_uv2 [[user(locn2)]];
        float3 fs_uv3 [[user(locn3)]];
        float2 fs_uv4 [[user(locn4)]];
        float2 fs_uv5 [[user(locn5)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant tile_map_fs_params& _80 [[buffer(0)]], depth2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], texture2d<float> un_tex2 [[texture(2)]], sampler un_sampler1 [[sampler(0)]], sampler un_sampler0 [[sampler(1)]])
    {
        main0_out out = {};
        out.frag_color = float4((((((float3(0.25) * (((un_tex0.sample_compare(un_sampler1, in.fs_uv0.xy, in.fs_uv0.z) + un_tex0.sample_compare(un_sampler1, in.fs_uv1.xy, in.fs_uv1.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv2.xy, in.fs_uv2.z)) + un_tex0.sample_compare(un_sampler1, in.fs_uv3.xy, in.fs_uv3.z))) * 0.5) + float3(0.5)) * un_tex1.sample(un_sampler0, in.fs_uv4).xyz) * _80.un_tile_color.xyz) * un_tex2.sample(un_sampler0, in.fs_uv5).xyz, _80.un_tile_color.w);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t tile_map_fs_source_metal_sim[1233] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,
    0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x75,
    0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,
    0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,
    0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x66,0x73,0x5f,0x75,0x76,0x33,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x34,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x34,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x35,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x35,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,
    0x20,0x74,0x69,0x6c,0x65,0x5f,0x6d,0x61,0x70,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x32,0x64,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,
    0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,
    0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x32,0x29,0x5d,0x5d,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x31,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x28,0x28,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x32,0x35,0x29,
    0x20,0x2a,0x20,0x28,0x28,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,
    0x30,0x2e,0x7a,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,0x75,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,0x65,0x28,
    0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x32,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x32,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x63,0x6f,0x6d,0x70,0x61,0x72,
    0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x31,0x2c,0x20,0x69,
    0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x78,0x79,0x2c,0x20,0x69,0x6e,0x2e,
    0x66,0x73,0x5f,0x75,0x76,0x33,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x35,0x29,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x35,0x29,
    0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,
    0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x34,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2a,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,0x6c,0x65,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x32,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x35,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x38,0x30,0x2e,0x75,0x6e,0x5f,0x74,0x69,
    0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
static inline const sg_shader_desc* tile_map_program_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "vs_position";
            desc.attrs[1].name = "vs_texcoord0";
            desc.vs.source = (const char*)tile_map_vs_source_glsl410;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "tile_map_vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 9;
            desc.fs.source = (const char*)tile_map_fs_source_glsl410;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "tile_map_fs_params";
            desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler1";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[1].glsl_name = "un_tex1_un_sampler0";
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].glsl_name = "un_tex2_un_sampler0";
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    #if defined(SOKOL_GLES3)
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "vs_position";
            desc.attrs[1].name = "vs_texcoord0";
            desc.vs.source = (const char*)tile_map_vs_source_glsl300es;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "tile_map_vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 9;
            desc.fs.source = (const char*)tile_map_fs_source_glsl300es;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "tile_map_fs_params";
            desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler1";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[1].glsl_name = "un_tex1_un_sampler0";
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].glsl_name = "un_tex2_un_sampler0";
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.vs.source = (const char*)tile_map_vs_source_hlsl5;
            desc.vs.d3d11_target = "vs_5_0";
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)tile_map_fs_source_hlsl5;
            desc.fs.d3d11_target = "ps_5_0";
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)tile_map_vs_source_metal_macos;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)tile_map_fs_source_metal_macos;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)tile_map_vs_source_metal_ios;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)tile_map_fs_source_metal_ios;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)tile_map_vs_source_metal_sim;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 144;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)tile_map_fs_source_metal_sim;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_DEPTH;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[2].used = true;
            desc.fs.images[2].multisampled = false;
            desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[2].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_COMPARISON;
            desc.fs.samplers[1].used = true;
            desc.fs.samplers[1].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 1;
            desc.fs.image_sampler_pairs[2].used = true;
            desc.fs.image_sampler_pairs[2].image_slot = 2;
            desc.fs.image_sampler_pairs[2].sampler_slot = 1;
            desc.label = "tile_map_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    return 0;
}
static inline int tile_map_program_attr_slot(const char* attr_name) {
    (void)attr_name;
    if (0 == strcmp(attr_name, "vs_position")) {
        return 0;
    }
    if (0 == strcmp(attr_name, "vs_texcoord0")) {
        return 1;
    }
    return -1;
}
static inline int tile_map_program_image_slot(sg_shader_stage stage, const char* img_name) {
    (void)stage; (void)img_name;
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(img_name, "un_tex0")) {
            return 0;
        }
        if (0 == strcmp(img_name, "un_tex1")) {
            return 1;
        }
        if (0 == strcmp(img_name, "un_tex2")) {
            return 2;
        }
    }
    return -1;
}
static inline int tile_map_program_sampler_slot(sg_shader_stage stage, const char* smp_name) {
    (void)stage; (void)smp_name;
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(smp_name, "un_sampler1")) {
            return 0;
        }
        if (0 == strcmp(smp_name, "un_sampler0")) {
            return 1;
        }
    }
    return -1;
}
static inline int tile_map_program_uniformblock_slot(sg_shader_stage stage, const char* ub_name) {
    (void)stage; (void)ub_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "tile_map_vs_params")) {
            return 0;
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "tile_map_fs_params")) {
            return 0;
        }
    }
    return -1;
}
static inline size_t tile_map_program_uniformblock_size(sg_shader_stage stage, const char* ub_name) {
    (void)stage; (void)ub_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "tile_map_vs_params")) {
            return sizeof(tile_map_tile_map_vs_params_t);
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "tile_map_fs_params")) {
            return sizeof(tile_map_tile_map_fs_params_t);
        }
    }
    return 0;
}
static inline int tile_map_program_uniform_offset(sg_shader_stage stage, const char* ub_name, const char* u_name) {
    (void)stage; (void)ub_name; (void)u_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "tile_map_vs_params")) {
            if (0 == strcmp(u_name, "un_mvp")) {
                return 0;
            }
            if (0 == strcmp(u_name, "un_shadow")) {
                return 64;
            }
            if (0 == strcmp(u_name, "un_inv_world_size")) {
                return 128;
            }
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "tile_map_fs_params")) {
            if (0 == strcmp(u_name, "un_tile_color")) {
                return 0;
            }
        }
    }
    return -1;
}
static inline sg_shader_uniform_desc tile_map_program_uniform_desc(sg_shader_stage stage, const char* ub_name, const char* u_name) {
    (void)stage; (void)ub_name; (void)u_name;
    #if defined(__cplusplus)
    sg_shader_uniform_desc desc = {};
    #else
    sg_shader_uniform_desc desc = {0};
    #endif
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "tile_map_vs_params")) {
            if (0 == strcmp(u_name, "un_mvp")) {
                desc.name = "un_mvp";
                desc.type = SG_UNIFORMTYPE_MAT4;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "un_shadow")) {
                desc.name = "un_shadow";
                desc.type = SG_UNIFORMTYPE_MAT4;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "un_inv_world_size")) {
                desc.name = "un_inv_world_size";
                desc.type = SG_UNIFORMTYPE_FLOAT2;
                desc.array_count = 0;
                return desc;
            }
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "tile_map_fs_params")) {
            if (0 == strcmp(u_name, "un_tile_color")) {
                desc.name = "un_tile_color";
                desc.type = SG_UNIFORMTYPE_FLOAT4;
                desc.array_count = 0;
                return desc;
            }
        }
    }
    return desc;
}
static inline int tile_map_program_storagebuffer_slot(sg_shader_stage stage, const char* sbuf_name) {
    (void)stage; (void)sbuf_name;
    return -1;
}
